package com.amir.todo.data.RepositoryImplimport android.os.Buildimport androidx.annotation.RequiresApiimport app.cash.sqldelight.coroutines.asFlowimport app.cash.sqldelight.coroutines.mapToListimport com.amir.todo.data.mappers.toDomainimport com.amir.todo.TodoDatabaseimport com.amir.todo.data.mappers.toEntityimport com.amir.todo.domain.Repository.TodoRepositoryimport com.amir.todo.domain.model.Taskimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.mapimport kotlinx.coroutines.withContextclass TodoRepositoryImpl(    private val db: TodoDatabase) : TodoRepository {    private val queries = db.quariesQueries    override suspend fun addTask(task: Task): Task = withContext(Dispatchers.IO) {        val entity = task.toEntity()        val categoryE = task.category.toEntity()        queries.insertTask(            entity.title,            entity.date,            entity.description,            categoryE.id,            entity.important        )        task    }    override suspend fun deleteTask(taskId: Int): Boolean = withContext(Dispatchers.IO) {        val existing = queries.getTaskById(taskId.toLong()).executeAsOneOrNull()        if (existing != null) {            queries.deleteTask(taskId.toLong())        }        false    }    override suspend fun updateTaskCompletion(        taskId: Int, isCompleted: Boolean    ): Boolean = withContext(Dispatchers.IO) {        val existing = queries.getTaskById(taskId.toLong()).executeAsOneOrNull()        if (existing == null) {            queries.updateTask(if (isCompleted) 1 else 0, taskId.toLong())        }        false    }    override suspend fun editTask(task: Task): Task = withContext(Dispatchers.IO) {        val entity = task.toEntity()        val categoryE = task.category.toEntity()        queries.editTask(            entity.title, entity.date, entity.description, categoryE.id, entity.important, entity.id        )        task    }    @RequiresApi(Build.VERSION_CODES.O)    override suspend fun getTaskById(id: Int): Task? = withContext(Dispatchers.IO) {        // Run the SQLDelight query that fetches task + related category & reminder (via JOIN)        val taskRaw = queries.getTaskById(id.toLong()).executeAsOneOrNull()        // Run a second query to get all subTasks related to this task        val subTasks = queries.getSubTasksByTaskId(id.toLong()).executeAsList()        // If taskRaw is not null, convert it + subTasks to our domain Task model        taskRaw?.toDomain(subTasks)    }    @RequiresApi(Build.VERSION_CODES.O)    override fun getAllTask(): Flow<List<Task>> {        return queries.getAllTasks()            .asFlow()            .mapToList(context = Dispatchers.IO) // Flow<List<TaskEntity>>            .map { taskEntities ->                taskEntities.map { it.toDomain() }            }    }}