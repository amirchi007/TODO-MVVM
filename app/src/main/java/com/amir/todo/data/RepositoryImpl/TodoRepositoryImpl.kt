package com.amir.todo.data.RepositoryImplimport amir.tododb.GetTaskWithRelationsByIdimport amir.tododb.TaskEntityimport android.os.Buildimport androidx.annotation.RequiresApiimport com.amir.todo.data.mappers.toDomainimport com.amir.todo.TodoDatabaseimport com.amir.todo.data.mappers.toEntityimport com.amir.todo.domain.Repository.TodoRepositoryimport com.amir.todo.domain.model.Taskimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.withContextclass TodoRepositoryImpl(    private val db: TodoDatabase) : TodoRepository {    private val queries = db.quariesQueries    override suspend fun addTask(task: Task): Task {        val entity = task.toEntity()        val categoryE = task.category.toEntity()        queries.insertTask(            entity.title,            entity.date,            entity.description,            categoryE.id,            entity.important        )        return task    }    override suspend fun deleteTask(taskId: Int): Boolean {        val existing = queries.getTaskById(taskId.toLong()).executeAsOneOrNull()        if (existing != null) {            queries.deleteTask(taskId.toLong())            return true        }        return false    }    override suspend fun updateTaskCompletion(        taskId: Int,        isCompleted: Boolean    ): Boolean {        val existing = queries.getTaskById(taskId.toLong()).executeAsOneOrNull()        return if (existing != null) {            queries.updateTask(if (isCompleted) 1 else 0, taskId.toLong())            true        } else {            false        }    }    override suspend fun editTask(task: Task): Task {        val entity = task.toEntity()        val categoryE = task.category.toEntity()        queries.editTask(            entity.title,            entity.date,            entity.description,            categoryE.id,            entity.important,            entity.id        )        return task    }    @RequiresApi(Build.VERSION_CODES.O)    override suspend fun getTaskById(id: Int): Task? {        return withContext(Dispatchers.IO) {            queries.getTaskById(id.toLong())                .executeAsOneOrNull()                .toDomain()    }    override fun getAllTask(): Flow<List<Task>> {        TODO("Not yet implemented")    }}