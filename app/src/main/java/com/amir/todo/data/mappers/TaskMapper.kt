package com.amir.todo.data.mappersimport amir.tododb.CategoryEntityimport amir.tododb.GetTaskWithRelationsByIdimport amir.tododb.ReminderEntityimport amir.tododb.SubTaskEntityimport amir.tododb.TaskEntityimport android.os.Buildimport androidx.annotation.RequiresApiimport androidx.compose.ui.graphics.Colorimport androidx.core.graphics.toColorIntimport com.amir.todo.domain.model.Categoryimport com.amir.todo.domain.model.Reminderimport com.amir.todo.domain.model.SubTaskimport com.amir.todo.domain.model.Taskimport java.time.LocalDate// Domain -> Entityfun Task.toEntity(): TaskEntity {    return TaskEntity(        id = id.toLong(),        title = title,        isDone = if (isDone) 1 else 0,        date = date.toString(),        description = description,        important = if (important) 1 else 0,        categoryId = category.id.toLong()    )}// Entity -> Domain@RequiresApi(Build.VERSION_CODES.O)fun List<GetTaskWithRelationsById>.toDomain(): Task? {    if (this.isEmpty()) return null    val first = this.first()    return Task(        id = first.id.toInt(),        title = first.title,        isDone = first.isDone == 1L,        description = first.description,        date = LocalDate.parse(first.date),        important = first.important == 1L,        category = Category(            id = first.category_id?.toInt() ?: 0,            title = first.category_title ?: "",            color = Color((first.category_color ?: "#000000").toColorInt())        ),        reminder = if (first.reminder_taskId != null)            Reminder(                timeBefore = first.timeBefore ?: 0L,                isEnabled = first.isEnabled == 1L            )        else Reminder.default(),        subTask = this.filter { it.sub_id != null }.map {            SubTask(                id = it.sub_id!!.toInt(),                title = it.sub_title ?: "",                taskId = it.sub_taskId!!.toInt(),                isDone = it.sub_done == 1L            )        }    )}